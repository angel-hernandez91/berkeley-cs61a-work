CS61a Lecture 14 February 25, 2015
Topic: Object-Oriented Programming

Object-Oriented Programming
	A method for organizing modular programs
		Bits and pieces of the program are constructed without worrying about the other pieces
	A metaphor for computation using distributed state
		Each object has its own local state
		each object also knows how to manage its own local state, based on method calls
		Method calls are messages passed between objects
		Several objects may all be instance of a common type
Classes
	A classes serves as a template for its instances
	Idea: All back accounts have a balance and an account holder; the Account class should add
	those attribute to each newly created instance.
	
	Idea: All bank accounts should have “withdraw” and “deposit” behaviors that all work in the
	same way

	Better idea: All bank accounts share a “withdraw” method and a “deposit” method.
Class Statements:
	Syntax:
		class <name>:
			<suite>

	A class statement creates a new class and binds  that class to <name? in the first frame of 	the current environment.
	Assignment & def statements in <suite> create attributes of the class
		(NOT names in frames)
	The suite is executed when the class statement is executed.
Objects
	All values are objects in python
    Objects are a place to put attributes
    To create a new instance of a class, we call the class with an argument and bind it
    to some variable

Object Construction
    Idea: All bank accounts have a balance and an account holder; the Account class should
    add those attributes to each of its instances
        >>> a = Account('Jim')
        >>> a.holder
        'Jim'
        >>> a.balance
        0

    When a class is called:
        1. A new instance of that class is created: balance: 0, holder: 'Jim'
			*This instance is ‘stored’ in self
        2. The __init__ method of the class is called with the new object as its first
           argument (named self), along with any additional arguments provided in the call 		   expression

    Sample Code:
        class Account
            def __init__(self, account_holder):
                self.balance = 0
                self.holder = account_holder
    Note: __init__ is called a constructor

Object Identity
    Every object that is an instance of a user-defined class has a unique identity
		It is its own thing
	Every calls to a Class creates a new instance of that Class. But there is only one such Class.
    i.e.
    >>>a = Account('Jim')
    >>>b = Account('Jack')
    >>>a.balance
    0
    >>>b.holder
    'Jack'

    Identity operators "is" and "is not" test if two expressions evaluate to the same object:
        >>> a is a
        True
        >>> a is not b
        True

    Binding ...
    
Methods
	An attribute that is a function
    Methods are functions defined in the suite of a class statement
    Sample Code:
        class Account
            def __init__(self, account_holder):
                self.balance = 0
                self.holder = account_holder

            def deposit(self, amount) Note: self should always be bound to an instance of the 
                                            Account class
                self.balance = self.balance = self.balance + amount
                return self.balance
            def withdraw(self, amount):
                if amount > self.balance:
                    return 'Insufficient Funds'
                self.balance = self.balance - amount
                return self.balance
	These def statements create function objects as always, but their names are bound as
	attributes of the class. (each def is an attribute)

Invoking Methods
    All invoked methods have access to the object via the self parameter, and so they can all
    access and manipulate the objects state

    Dot notation automatically supplies the first argument to a method
		Supplies the object instance we are invoking the method object on
    <bound to self>.method(argument) <<--Note that it is invoked with only one argument

Dot Expressions
    Objects receive messages via dot notation
    Dot notation accesses attributes of the instance or its class

        <expression>.<name>

    The <expression> can be any valid Python expression
    The <name> must be a simple name
    Evaluates to the value of the attribute looked up by <name> in the object that is the 
        value of the <expression>

Attributes
	Data stored within an instance or the class itself
    Using getattr, we can look up an attribute using a string
		Syntax: getattr(<object>, <attribute>)

    getattr and dot expressions look up a name in the same way
	Looking up an attribute name in an object may return:
		One of its instance attributes, or
		One of the the attributes of its class

Methods and Functions
	A method is a function that is attribute
    Python distinguishes between:
        Functions
        Bound Methods, which couple together a function and object on which that method will
            be invoked
        
        Object + Function = Bound Method
        Functions: all arguments within parentheses
        Method: One object before the dot and other argument with parentheses

Looking Up Attributes by Name
								<expression> . <name>
    Procedure:
	1. Evaluate the <expression> to the left of the dot, which yields the object of the dot
	   expression
	2. <name> is matched against the instance attributes of that object; if an attribute with
	   that name exists, its value is returned.
	3. If not, <name> is looked up in the class, which yields a class attribute value.
	4. That value is returned unless it is a function, in which case a bound method is returned
       instead. 

Class Attributes
    Class attributes are 'shared' across all instances of a class because they are attributes of the class, not the instance
    It is defined in the class directly, not in any methods (i.e. it is Global to that class)
	An attribute is not copied directly into an instance of that class, but rather stored in the class itself.

Attribute Assignment
    Assignment statements with a dot expression on their left-hand side affect attributes for the object of that dot expression 
        If the object is an instance, then assignment sets an instance attribute
        If the object is a class, the assignment sets a class attribute






